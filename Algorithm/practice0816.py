'''
# 부분집합의 합
def f(i, N):
    if i == N:
        print(bit, end=' ')
        s = 0
        for j in range(N):
            if bit[j]:
                print(A[j], end=' ')
                s += A[j]
        print(f' : {s}')
        return
    else:
        bit[i] = 1
        f(i+1, N)
        bit[i] = 0
        f(i+1, N)
        return


A = [1, 2, 3]
bit = [0] * 3
f(0, 3)


[1, 1, 1] 1 2 3  : 6
[1, 1, 0] 1 2  : 3
[1, 0, 1] 1 3  : 4
[1, 0, 0] 1  : 1
[0, 1, 1] 2 3  : 5
[0, 1, 0] 2  : 2
[0, 0, 1] 3  : 3
[0, 0, 0]  : 0



# 부분집합 2
# s : i-1 원소까지 부분집합의 합(포함된 원소의 합)

def f(i, N, s):
    if i == N:
        print(bit, end=' ')
        print(f' : {s}')
        return

    else:
        bit[i] = 1  # 부분집합에 A[i] 포함
        f(i+1, N, s+A[i])
        bit[i] = 0  # 부분집합에 A[i] 미포함
        f(i+1, N, s)
        return


A = [1, 2, 3]
bit = [0] * 3
f(0, 3, 0)


[1, 1, 1]  : 6
[1, 1, 0]  : 3
[1, 0, 1]  : 4
[1, 0, 0]  : 1
[0, 1, 1]  : 5
[0, 1, 0]  : 2
[0, 0, 1]  : 3
[0, 0, 0]  : 0



# 부분집합 3
# s : i-1원소까지 부분집합의 합(포함된 원소의 합)
# t : 찾으려는 합
def f(i, N, s, t):
    global cnt
    cnt += 1
    if s == t:
        print(bit)

    elif i == N:  # 찾는 합은 아니지만 남은 원소가 없는 경우
        return

    elif s > t:
        return

    else:
        bit[i] = 1  # 부분집합에 A[i] 포함
        f(i+1, N, s+A[i], t)
        bit[i] = 0  # 부분집합에 A[i] 미포함
        f(i+1, N, s, t)
        return


# 1부터 10까지 원소인 집합, 부분집합의 합이 10인 경우는?
N = 10
A = [i for i in range(1, N+1)]
bit = [0] * N
cnt = 0
f(0, N, 0, 10)
print(cnt)


[1, 1, 1, 1, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 1, 0, 0, 0]
[1, 0, 1, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 0, 1, 1, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0, 1, 0]
[0, 1, 1, 0, 1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 1, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
349

'''


# 순열 1
def f(i, N):
    if i == N:
        print(A)
    else:
        for j in range(i, N):  # 자신부터 오른쪽 끝까지
            A[i], A[j] = A[j], A[i]
            f(i+1, N)
            A[i], A[j] = A[j], A[i]  # 원상복구


A = [1, 2, 3]
f(0, 3)

'''
[1, 2, 3]
[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 2, 1]
[3, 1, 2]
'''

